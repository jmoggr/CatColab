name: deploy

on:
  push:
    branches:
      - main
  # pull_request:
  # release:
  #   types: [published]

env:
  BRANCH_NAME: ${{ github.ref_name }}

permissions:
  pull-requests: write

jobs:
  deploy_backend:
    name: Deploy backend to AWS
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    env:
      TARGET_HOST: catcolab-jmoggr

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      # We explicitly manage saving and restoring the cache so that we can ensure the cache will still be
      # updated if a build step fails. This greatly reduces the time it takes to debug a failing deploy.
      - name: Restore /nix/store from cache
        id: cache-nix-store-restore
        uses: actions/cache/restore@v4
        with:
          path: ./nix-store-cache

          # We use a constant cache key to always restore and update the cache. Nix's garbage collector
          # will clean up stale entries, so we rely on that instead of changing cache keys. Saving the
          # cache adds about 40 seconds to the build time, which we accept in order to avoid the much
          # larger cost (~8 minutes) of rebuilding the entire /nix/store from scratch when there's a
          # cache miss.
          key: nix-store4

      - name: Update cache
        if: always()
        # if: steps.cache-nix-storej-restore.outputs.cache-hit == 'true'
        run: |
          ls ./nix-store-cache

      - name: Update cache
        if: steps.cache-nix-store-restore.outputs.cache-hit == 'true'
        run: |
          for file in ./nix-store-cache/*; do
            base=$(basename "$file")
            if [ ! -e "/nix/store/$base" ]; then
              mv "$file" /nix/store/
            fi
          done

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CATCOLAB_NEXT_DEPLOYUSER_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan backend-next.catcolab.org >> ~/.ssh/known_hosts

      - name: Deploy and Clean Up
        run: |
          # Build the system configuration; this creates a symlink "result" which will be used to create a GC root
          nix build .#nixosConfigurations.${TARGET_HOST}.config.system.build.toplevel --out-link ./result

          # Deploy the system to the remote host, this will reuse the artifacts built in the previous stup
          nix run .#deploy-rs -- .#${TARGET_HOST} --skip-checks

          # Pin the current system build result explicitly as a GC root
          nix-store --add-root /tmp/current-system --indirect ./result

          # Garbage collect store paths not reachable from:
          #   - the current system build, pinned as /tmp/current-system
          #   - the deployed flake’s dependencies, reachable from the ./result
          #   - deploy‑rs, pinned in the nix profile
          nix-collect-garbage -d
          nix-store --gc

          du -hs /nix/store

      - name: Update cache
        if: always()
        # if: steps.cache-nix-storej-restore.outputs.cache-hit == 'true'
        run: |
          rm -rf ./nix-store-cache
          cp -r /nix/store/* ./nix-store-cache/
          ls ./nix-store-cache

      - name: Cache /nix/store
        id: cache-nix-store-save
        if: always()
        uses: actions/cache/save@v4
        with:
          key: nix-store4
          path: ./nix-store-cache
