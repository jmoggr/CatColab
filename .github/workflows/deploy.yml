name: deploy

on:
  push:
    branches:
      - main
  # pull_request:
  # release:
  #   types: [published]

env:
  BRANCH_NAME: ${{ github.ref_name }}

permissions:
  pull-requests: write

jobs:
  deploy_backend:
    name: Deploy backend to AWS
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref_name == 'main'
    env:
      TARGET_HOST: catcolab-jmoggr

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Restore store
        id: cache-primes-restore
        uses: nix-community/cache-nix-action/restore@v6
        with:
          primary-key: nix-store-1

      - uses: nix-community/cache-nix-action@v6
        id: cache
        with:
          primary-key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
          paths: path/to/dependencies

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CATCOLAB_NEXT_DEPLOYUSER_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan backend-next.catcolab.org >> ~/.ssh/known_hosts

      - name: Deploy and Clean Up
        run: |
          nix build .#nixosConfigurations.${TARGET_HOST}.config.system.build.toplevel --out-link ./result
          # Build the system configuration; this creates a symlink "result" which will be used to create a GC root

          # Deploy the system to the remote host, this will reuse the artifacts built in the previous stup
          # nix run .#deploy-rs -- .#${TARGET_HOST} --skip-checks

          # Pin the current system build result explicitly as a GC root
          nix-store --add-root /tmp/current-system --indirect ./result

          # Garbage collect store paths not reachable from:
          #   - the current system build, pinned as /tmp/current-system
          #   - the deployed flake’s dependencies, reachable from the ./result
          #   - deploy‑rs, pinned in the nix profile
          nix-collect-garbage -d
          nix-store --gc

          du -hs /nix/store

      - name: save store
        id: cache-primes-save
        uses: nix-community/cache-nix-action/save@v6
        with:
          primary-key: nix-store-1
